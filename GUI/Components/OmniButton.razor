@using Core.Exceptions
@using GUI.Components.Modal
@using GUI.Data
@using Core.SaveFiles.Manager
@using Core.SaveFiles.Models
@using Microsoft.AspNetCore.Components.Web
@using System.Reactive.Linq

<div class="d-flex justify-content-center mt-3">
    <!--
        The Button will expand to fill it's container, so this width needs to be large enough to hold the button with
        the widest possible contents. Otherwise the Button's size will change with the contents which just looks weird.
    -->
    <div style="min-width: 500px;">
        <Button onClickCallback="OmniButtonClick"
            disabled="@IsOmniButtonDisabled()"
            tooltip="@OmniButtonTooltip">
            <content>
                @OmniButtonText
                <!-- Give some progress indication when the save file is locked, so the user knows that we're waiting for it to unlock -->
                @if (IsAnySaveFileLocked)
                {
                    <EllipsisProgress />
                }
            </content>
        </Button>
    </div>
</div>

@code {
    [Inject]
    private ILogger<OmniButton> _Logger { get; set; } = default!;
    [Inject]
    public SyncerManagerService SyncerManager { get; set; } = default!;
    [Inject]
    public SaveFileManagerService SaveFileManager { get; set; } = default!;

    [Parameter]
    public SteamSaveFile? steamSaveFile { get; set; }
    [Parameter]
    public XboxSaveFile? xboxSaveFile { get; set; }

    protected Core.SaveFiles.Models.SaveFile? Overwriter;
    protected Core.SaveFiles.Models.SaveFile? Overwritee;
    protected bool IsAnySaveFileLocked;
    protected bool IsRefreshAvailable;
    protected string OmniButtonText = "";
    protected string? OmniButtonTooltip;

    // Lifecycle

    protected override void OnInitialized()
    {
        Overwriter = SyncerManager.Overwriter;
        SyncerManager.OverwriterChanged.Subscribe(saveFile =>
        {
            Overwriter = saveFile;
            UpdateOmniButtonText();
            UpdateOmniButtonTooltip();
            InvokeAsync(StateHasChanged);
        });

        Overwritee = SyncerManager.Overwritee;
        SyncerManager.OverwriteeChanged.Subscribe(saveFile =>
        {
            Overwritee = saveFile;
            UpdateOmniButtonText();
            UpdateOmniButtonTooltip();
            InvokeAsync(StateHasChanged);
        });

        IsAnySaveFileLocked = SaveFileManager.SaveFileLocked;
        IsRefreshAvailable = false;    // default to false when starting to avoid superfluous refreshing
        SaveFileManager.SaveFileLockedChanged.Subscribe(locked => {
            IsAnySaveFileLocked = locked;
            IsRefreshAvailable = !locked;
            UpdateOmniButtonText();
            UpdateOmniButtonTooltip();
            InvokeAsync(StateHasChanged);
        });

        SaveFileManager.SyncedSaveFilesChanged.Subscribe(saveFiles => {
            IsRefreshAvailable = false;
            UpdateOmniButtonText();
            UpdateOmniButtonTooltip();
            InvokeAsync(StateHasChanged);
        });

        UpdateOmniButtonText();
        UpdateOmniButtonTooltip();
    }

    protected override void OnParametersSet()
    {
        UpdateOmniButtonText();
        InvokeAsync(StateHasChanged);
    }

    // Methods

    protected bool IsOverwriterOrOverwriteeNull()
    {
        return Overwriter == null || Overwritee == null;
    }

    protected void UpdateOmniButtonText()
    {
        if (IsAnySaveFileLocked)
        {
            OmniButtonText = "Save file busy";
            return;
        }
        else if (IsRefreshAvailable)
        {
            OmniButtonText = "Refresh save files";
            return;
        }
        else if (IsOverwriterOrOverwriteeNull())
        {
            if (steamSaveFile == null || xboxSaveFile == null)
            {
                OmniButtonText = "Missing save file";
                return;
            }

            try
            {
                if (steamSaveFile as Core.SaveFiles.Models.SaveFile == xboxSaveFile as Core.SaveFiles.Models.SaveFile)
                {
                    OmniButtonText = "Save files are already synced";
                    return;
                }
                else
                {
                    // this is likely a transitory state
                    OmniButtonText = "Select a save file to sync from";
                    return;
                }
            }
            catch (DivergentSaveFileException)
            {
                OmniButtonText = "Save files are divergent";
                return;
            }
        }

        OmniButtonText = $"Overwrite {SyncerManager.GetSaveFilePlatform(Overwritee)} save with {SyncerManager.GetSaveFilePlatform(Overwriter)} save";
        return;
    }

    protected void UpdateOmniButtonTooltip()
    {
        if (IsAnySaveFileLocked)
        {
            OmniButtonTooltip = "A save file is being used, give it a moment to finish.";
            return;
        }
        else if (IsRefreshAvailable)
        {
            OmniButtonTooltip = null;
            return;
        }
        else if (IsOverwriterOrOverwriteeNull())
        {
            if (steamSaveFile == null || xboxSaveFile == null)
            {
                OmniButtonTooltip = null;
                return;
            }

            try
            {
                if (steamSaveFile as Core.SaveFiles.Models.SaveFile == xboxSaveFile as Core.SaveFiles.Models.SaveFile)
                {
                    OmniButtonTooltip = null;
                    return;
                }
            }
            catch (DivergentSaveFileException)
            {
                OmniButtonTooltip = "Select the save file you want to keep.";
                return;
            }
        }

        OmniButtonTooltip = null;
    }

    protected Boolean IsOmniButtonDisabled()
    {
        if (IsAnySaveFileLocked)
        {
            return true;
        }

        if (IsRefreshAvailable)
        {
            return false;
        }
        else
        {
            return IsOverwriterOrOverwriteeNull();
        }
    }

    protected void OmniButtonClick()
    {
        if (IsRefreshAvailable)
        {
            SyncerManager.Refresh();
        }
        else
        {
            SyncerManager.OverwriteSaveFile();
        }

        IsRefreshAvailable = false;
    }
}
