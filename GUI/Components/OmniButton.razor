@using Core.Exceptions
@using GUI.Components.Modal
@using GUI.Data
@using Core.SaveFiles.Manager
@using Core.SaveFiles.Models
@using Microsoft.AspNetCore.Components.Web
@using System.Reactive.Linq

<div class="d-flex justify-content-center mt-3">
    <Button text="@OmniButtonText"
        onClickCallback="OmniButtonClick"
        disabled="@IsOmniButtonDisabled()"
        tooltip="@(IsAnySaveFileLocked ? "A save file is being used, give it a moment to finish." : null)">
    </Button>
</div>

@code {
    [Inject]
    private ILogger<OmniButton> _Logger { get; set; } = default!;
    [Inject]
    public SyncerManagerService SyncerManager { get; set; } = default!;
    [Inject]
    public SaveFileManagerService SaveFileManager { get; set; } = default!;

    [Parameter]
    public SteamSaveFile? steamSaveFile { get; set; }
    [Parameter]
    public XboxSaveFile? xboxSaveFile { get; set; }

    protected Core.SaveFiles.Models.SaveFile? Overwriter;
    protected Core.SaveFiles.Models.SaveFile? Overwritee;
    protected bool IsAnySaveFileLocked;
    protected bool IsRefreshAvailable;
    protected string OmniButtonText;

    // Lifecycle

    protected override void OnInitialized()
    {
        Overwriter = SyncerManager.Overwriter;
        SyncerManager.OverwriterChanged.Subscribe(saveFile =>
        {
            Overwriter = saveFile;
            UpdateOmniButtonText();
            InvokeAsync(StateHasChanged);
        });

        Overwritee = SyncerManager.Overwritee;
        SyncerManager.OverwriteeChanged.Subscribe(saveFile =>
        {
            Overwritee = saveFile;
            UpdateOmniButtonText();
            InvokeAsync(StateHasChanged);
        });

        IsRefreshAvailable = false;    // default to false when starting to avoid superfluous refreshing
        SaveFileManager.SaveFileLockedChanged.Subscribe(locked => {
            IsAnySaveFileLocked = locked;
            IsRefreshAvailable = !locked;
            UpdateOmniButtonText();
            InvokeAsync(StateHasChanged);
        });

        SaveFileManager.SyncedSaveFilesChanged.Subscribe(saveFiles => {
            IsRefreshAvailable = false;
            UpdateOmniButtonText();
            InvokeAsync(StateHasChanged);
        });
    }

    protected override async void OnParametersSet()
    {
        UpdateOmniButtonText();
        InvokeAsync(StateHasChanged);
    }

    // Methods

    protected bool IsOverwriterOrOverwriteeNull()
    {
        return Overwriter == null || Overwritee == null;
    }

    protected void UpdateOmniButtonText()
    {
        if (IsAnySaveFileLocked)
        {
            OmniButtonText = "Save file locked";
            return;
        }
        else if (IsRefreshAvailable)
        {
            OmniButtonText = "Refresh save files";
            return;
        }
        else if (IsOverwriterOrOverwriteeNull())
        {
            if (steamSaveFile == null || xboxSaveFile == null)
            {
                OmniButtonText = "Missing save file";
                return;
            }

            try
            {
                if (steamSaveFile as Core.SaveFiles.Models.SaveFile == xboxSaveFile as Core.SaveFiles.Models.SaveFile)
                {
                    OmniButtonText = "Save files are already synced";
                    return;
                }
                else
                {
                    // this is likely a transitory state
                    OmniButtonText = "Select a save file to sync from";
                    return;
                }
            }
            catch (DivergentSaveFileException)
            {
                OmniButtonText = "Save files are divergent";
                return;
            }
        }

        OmniButtonText = $"Sync {SyncerManager.GetSaveFilePlatform(Overwritee)} save with {SyncerManager.GetSaveFilePlatform(Overwriter)} save";
        return;
    }

    protected Boolean IsOmniButtonDisabled()
    {
        if (IsAnySaveFileLocked)
        {
            return true;
        }

        if (IsRefreshAvailable)
        {
            return false;
        }
        else
        {
            return IsOverwriterOrOverwriteeNull();
        }
    }

    protected void OmniButtonClick()
    {
        if (IsRefreshAvailable)
        {
            SyncerManager.Refresh();
        }
        else
        {
            SyncerManager.OverwriteSaveFile();
        }

        IsRefreshAvailable = false;
    }
}
