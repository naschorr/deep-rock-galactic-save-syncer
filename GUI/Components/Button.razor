<!-- Note: this component will expand to fit it's parent (width-wise), and keep it's contents centered while doing so -->

<!-- use a div instead of a button to ignore default styling -->
<div class="button @classes"
    @onclick="OnClick"
    @onmouseover="@(e => { active = true; UpdateClassStrings(); })"
    @onmouseout="@(e => { active = false; UpdateClassStrings(); })"
    title="@tooltip">
    <div class="d-flex content-container">
        <div class="edge mr-1 bg-primary @classes"></div>
        <div class="main bg-primary @classes">
            @if (content != null)
            {
                @content;
            }
            else
            {
                @text;
            }
        </div>
        <div class="edge ml-1 bg-primary @classes"></div>
    </div>
</div>

@code {
    [Inject]
    private ILogger<Button> _Logger { get; set; } = default!;

    /// <summary>
    /// A render remplate for displaying complex elements inside the button. Will override the `text` parameter if
    /// also specified.
    /// </summary>
    [Parameter]
    public RenderFragment content { get; set; } = default!;
    /// <summary>
    /// Plaintext to display inside the button when no content template is provided.
    /// </summary>
    [Parameter]
    public string text { get; set; } = default!;
    [Parameter]
    public bool disabled { get; set; } = false;
    [Parameter]
    public string? tooltip { get; set; } = null;
    [Parameter]
    public EventCallback onClickCallback { get; set; } = default!;

    private bool active = false;
    private string classes = "";

    protected override void OnParametersSet()
    {
        UpdateClassStrings();
    }

    protected void UpdateClassStrings()
    {
        if (disabled)
        {
            classes = "disabled";
            return;
        }
        else if (active)
        {
            classes = "active";
            return;
        }

        classes = "";
        return;
    }

    protected async Task OnClick(MouseEventArgs e)
    {
        if (!disabled)
        {
            _Logger.LogInformation($"Button clicked, callback invoked");
            await onClickCallback.InvokeAsync();
        }
        else
        {
            _Logger.LogDebug($"Disabled button clicked");
        }
    }
}
