@using GUI.Data

<div class="position-relative">
    <div class="row">
        <div class="col-12 d-flex justify-content-center">
            <h1 class="title-text">DRGSS</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-12 d-flex justify-content-center">
            <h2 class="sub-text">Deep Rock Galactic Save Syncer</h2>
        </div>
    </div>
    <div class="stealth-button refresh-container p-1 @((_IsRefreshAvailable ? "" : "no-refresh-available"))"
        title="Refresh the save files"
        @onclick="@(e => RefreshSaveFiles())">
        <img class="icon-m" src="/icons/drg_icons/resupplier_icon.png" />
    </div>
    @if (_RepoUrl != null)
    {
        <div class="stealth-button github-link-container p-1" title="View on GitHub" @onclick="@(e => OpenRepoInBrowser())">
            <img class="icon-m" src="/icons/github_logomark.png" />
        </div>
    }
</div>

@code {
    [Inject]
    public ConfigLoaderService ConfigLoader { get; set; } = default!;
    [Inject]
    public SyncerManagerService SyncerManager { get; set; } = default!;
    [Inject]
    public SaveFileManagerService SaveFileManager { get; set; } = default!;

    [Parameter]
    public EventCallback onRefresh { get; set; } = default!;

    private string? _RepoUrl;
    private bool _IsRefreshAvailable;

    protected override void OnInitialized()
    {
        _RepoUrl = ConfigLoader.Config?.repoUrl;

        _IsRefreshAvailable = false;    // default to false when starting to avoid superfluous refreshing
        SaveFileManager.SaveFileLockedChanged.Subscribe(locked => {
            _IsRefreshAvailable = !locked;
            InvokeAsync(() => StateHasChanged());
        });
    }

    protected void RefreshSaveFiles()
    {
        if (!_IsRefreshAvailable)
        {
            return;
        }

        InvokeAsync(() =>
        {
            SyncerManager.Refresh();
            _IsRefreshAvailable = false;
            StateHasChanged();
        });
    }

    protected void OpenRepoInBrowser()
    {
        ElectronNET.API.Electron.Shell.OpenExternalAsync(_RepoUrl);
    }
}
